# -*- coding: utf-8 -*-
"""BERT_epoch15(save model)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PSZuQwsQUvkkOXEcptH62Jn4d14G-XAq

# Imports
"""

! python --version

!pip install tensorflow_hub
!pip install keras tf-models-official pydot graphviz

import os

import numpy as np
import pandas as pd

import tensorflow as tf
import tensorflow_hub as hub

from keras.utils import np_utils

import official.nlp.bert.bert_models
import official.nlp.bert.configs
import official.nlp.bert.run_classifier
import official.nlp.bert.tokenization as tokenization

from official.modeling import tf_utils
from official import nlp
from official.nlp import bert

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

import matplotlib.pyplot as plt

gpus = tf.config.experimental.list_physical_devices('GPU')
if gpus:
  try:
    # Currently, memory growth needs to be the same across GPUs
    for gpu in gpus:
      tf.config.experimental.set_memory_growth(gpu, True)
    logical_gpus = tf.config.experimental.list_logical_devices('GPU')
    print(len(gpus), "Physical GPUs,", len(logical_gpus), "Logical GPUs")
  except RuntimeError as e:
    # Memory growth must be set before GPUs have been initialized
    print(e)

print("Version: ", tf.__version__)
print("Eager mode: ", tf.executing_eagerly())
print("Hub version: ", hub.__version__)
print("GPU is", "available" if tf.config.list_physical_devices('GPU') else "NOT AVAILABLE")

"""# Data"""

from google.colab import drive
drive.mount('/content/drive')

dev = pd.read_csv('/content/drive/MyDrive/STT/dev.txt', sep='\t', names=['purpose','sentence'], encoding='utf-8')
train = pd.read_csv("/content/drive/MyDrive/STT/train.txt", sep='\t',names=['purpose','sentence'],encoding='utf-8')

dev = dev.dropna()
train = train.dropna()
train = train.drop_duplicates(['sentence'], keep='first')
dev = dev.drop_duplicates(['sentence'], keep='first')

"""We have two classes in the dataset"""

train['purpose'] = train['purpose'].astype('category').cat.codes
dev['purpose'] = dev['purpose'].astype('category').cat.codes
train.purpose

train.purpose.unique()

"""## Train/test split"""

x = train.sentence.values

y = train.purpose.values

x_train = train.sentence.values

y_train = train.purpose.values

x_test = dev.sentence.values

y_test = dev.purpose.values

"""## Label Encoding"""

encoder = LabelEncoder()
encoder.fit(y)
encoded_Y_test = encoder.transform(y_test)
encoded_Y_train = encoder.transform(y_train)

# convert integers to dummy variables (i.e. one hot encoded)
dummy_y_test = np_utils.to_categorical(encoded_Y_test)
dummy_y_train = np_utils.to_categorical(encoded_Y_train)

"""## Tokenization"""

bert_layer = hub.KerasLayer("https://tfhub.dev/tensorflow/bert_multi_cased_L-12_H-768_A-12/2",
                            trainable=True)

vocab_file = bert_layer.resolved_object.vocab_file.asset_path.numpy()
do_lower_case = bert_layer.resolved_object.do_lower_case.numpy()
tokenizer = tokenization.FullTokenizer(vocab_file, do_lower_case)

do_lower_case

tokenizer.convert_tokens_to_ids(['[CLS]', '[SEP]'])

def encode_names(n):
   tokens = list(tokenizer.tokenize(n))
   tokens.append('[SEP]')  # seperation token. Would bemuch more useful if you had a multiple text input.
   return tokenizer.convert_tokens_to_ids(tokens)

sentences = tf.ragged.constant([
    encode_names(n) for n in x_train])

print('Tokenized sentences shape', sentences.shape.as_list())

sentences[0]

x_train[0]

tokenizedSentence = tokenizer.tokenize(x_train[0])
for i in tokenizedSentence:
  print(i, tokenizer.convert_tokens_to_ids([i]))

cls = [tokenizer.convert_tokens_to_ids(['[CLS]'])]*sentences.shape[0]
input_word_ids = tf.concat([cls, sentences], axis=-1)
_ = plt.pcolormesh(input_word_ids[0:10].to_tensor())

"""## Mask and input type


"""

input_word_ids

input_mask = tf.ones_like(input_word_ids).to_tensor()

plt.pcolormesh(input_mask)

"""Here each yellow block has some input. We just make this for the model to differ between padding and input."""

type_cls = tf.zeros_like(cls)
type_sentence = tf.ones_like(sentences)
input_type_ids = tf.concat([type_cls, type_sentence], axis=-1).to_tensor()

plt.pcolormesh(input_type_ids)

"""It's hard to see but we added an empty block in front for the `[CLS]` token. Check tensor below"""

input_type_ids

"""## Remake into a function for normal use"""

lens = [len(i) for i in input_word_ids]

max_seq_length = max(lens)
print('Max length is:', max_seq_length)

max_seq_length = int(1.5*max_seq_length)
print('Max length is:', max_seq_length)

def encode_names(n, tokenizer):
   tokens = list(tokenizer.tokenize(n))
   tokens.append('[SEP]')
   return tokenizer.convert_tokens_to_ids(tokens)

def bert_encode(string_list, tokenizer, max_seq_length):
  num_examples = len(string_list)
  
  string_tokens = tf.ragged.constant([
      encode_names(n, tokenizer) for n in np.array(string_list)])

  cls = [tokenizer.convert_tokens_to_ids(['[CLS]'])]*string_tokens.shape[0]
  input_word_ids = tf.concat([cls, string_tokens], axis=-1)

  input_mask = tf.ones_like(input_word_ids).to_tensor(shape=(None, max_seq_length))

  type_cls = tf.zeros_like(cls)
  type_tokens = tf.ones_like(string_tokens)
  input_type_ids = tf.concat(
      [type_cls, type_tokens], axis=-1).to_tensor(shape=(None, max_seq_length))

  inputs = {
      'input_word_ids': input_word_ids.to_tensor(shape=(None, max_seq_length)),
      'input_mask': input_mask,
      'input_type_ids': input_type_ids}

  return inputs

X_train = bert_encode(x_train, tokenizer, max_seq_length)
X_test = bert_encode(x_test, tokenizer, max_seq_length)

"""## Training"""

num_class = len(encoder.classes_)  # Based on available class selection
max_seq_length = max_seq_length  # we calculated this a couple cells ago

input_word_ids = tf.keras.layers.Input(shape=(max_seq_length,), dtype=tf.int32,
                                       name="input_word_ids")
input_mask = tf.keras.layers.Input(shape=(max_seq_length,), dtype=tf.int32,
                                   name="input_mask")
segment_ids = tf.keras.layers.Input(shape=(max_seq_length,), dtype=tf.int32,
                                    name="segment_ids")

pooled_output, sequence_output = bert_layer([input_word_ids, input_mask, segment_ids])                                  

output = tf.keras.layers.Dropout(rate=0.1)(pooled_output)

output = tf.keras.layers.Dense(num_class, activation='softmax', name='output')(output)

model = tf.keras.Model(
    inputs={
        'input_word_ids': input_word_ids,
        'input_mask': input_mask,
        'input_type_ids': segment_ids
        },
        outputs=output)

"""Our model."""

tf.keras.utils.plot_model(model, show_shapes=True, dpi=48)

"""Set up the training parameters."""

epochs = 15
batch_size = 16  # select based on your GPU resources
eval_batch_size = batch_size

train_data_size = len(dummy_y_train)
steps_per_epoch = int(train_data_size / batch_size)
num_train_steps = steps_per_epoch * epochs
warmup_steps = int(epochs * train_data_size * 0.1 / batch_size)

optimizer = nlp.optimization.create_optimizer(
    2e-5, num_train_steps=num_train_steps, num_warmup_steps=warmup_steps)

"""Compile the model."""

model.compile(optimizer=optimizer,
              loss='categorical_crossentropy',
              metrics=['accuracy'])

model.summary()

"""Set up a history to check our model performance afterwards."""

history = model.fit(X_train,
                    dummy_y_train,
                    epochs=epochs,
                    batch_size=batch_size,
                    validation_data=(X_test, dummy_y_test),
                    verbose=1)

"""Evaluation"""

loss, accuracy = model.evaluate(X_train, dummy_y_train, verbose=False)
print("Training Accuracy: {:.4f}".format(accuracy))
loss, accuracy = model.evaluate(X_test, dummy_y_test, verbose=False)
print("Testing Accuracy:  {:.4f}".format(accuracy))

"""Noice plots are noice"""

plt.style.use('ggplot')

def plot_history(history):
    acc = history.history['accuracy']
    val_acc = history.history['val_accuracy']
    loss = history.history['loss']
    val_loss = history.history['val_loss']
    x = range(1, len(acc) + 1)

    plt.figure(figsize=(12, 5))
    plt.subplot(1, 2, 1)
    plt.plot(x, acc, 'b', label='Training acc')
    plt.plot(x, val_acc, 'r', label='Validation acc')
    plt.title('Training and validation accuracy')
    plt.legend()
    plt.subplot(1, 2, 2)
    plt.plot(x, loss, 'b', label='Training loss')
    plt.plot(x, val_loss, 'r', label='Validation loss')
    plt.title('Training and validation loss')
    plt.legend()

plot_history(history)

"""

## Model saving for later use
"""

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

model_fname = 'saved_model_epoch15'
my_wd = '/content/drive/My Drive/2021/MZ인공지능 해커톤/model'

model.save(os.path.join(my_wd, model_fname))

"""### Validate saved model

save whether model loads correctly after saving
"""

new_model = tf.keras.models.load_model(os.path.join(my_wd, model_fname))

loss, accuracy = new_model.evaluate(X_test, dummy_y_test, verbose=False)
print("Testing Accuracy:  {:.4f}".format(accuracy))

new_model.summary()

"""Check Tokenizer variables"""

tokenizerSaved = bert.tokenization.FullTokenizer(
    vocab_file=os.path.join(my_wd, model_fname, 'assets/vocab.txt'),
    do_lower_case=False)



tokenizedTweet = tokenizerSaved.tokenize(x_train[0])
for i in tokenizedTweet:
  print(i, tokenizerSaved.convert_tokens_to_ids([i]))